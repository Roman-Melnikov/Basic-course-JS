if (!("a" in window)) {           //  ответ: undefined
    var a = 1;                        Так как используется var, переменная "а" будет создана, но значение 1 в неё положено не будет, т.к. условие оператора if = false
}
alert(a);


var b = function a(x) {           // ответ: ничего не будет
    x && a(--x);                     переменная "b" будет создана, но функция "a" нет , т.к. это function expression
};
alert(a);


function a(x) {                  // ответ: в alerte будет описание функции "а"
    return x * 2;                   JavaScript создаст переменную "а" и положит в неё ссылку на  описанную функцию, 
}                                   а так как в строке "var a" переменной "а" ничего не присваивается, то в ней останется лежать функция
var a;
alert(a);


function b(x, y, a) {           // ответ: 10
    arguments[2] = 10;             arguments - это зарезервированное слово в JS, обозначающее псевдомассив в котором хранятся передаваемые параметры.
    alert(a);                      Индекс "2" будет у параметра"а", ему и присваивается значение 10
}
b(1, 2, 3);


function a() {                  // ответ: window
    alert(this);                   call - это свойство функции, при помощи которого функции можно указать this. Но т.к. null это ничего, то получается ,
}                                  что функции "а" ничто не было передано и в this оказался объект в котором функция "а" была определена
a.call(null);